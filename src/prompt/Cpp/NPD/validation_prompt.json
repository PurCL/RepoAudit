{
    "model_role_name": "Data Flow Validator",
    "user_role_name": "Data Flow Validator",
    "system_role": "You are a <LANGUAGE> programmer and very good at analyzing <LANGUAGE> code. Particularly, you are good at understanding the data-flow propagation within several functions.",
    "task": "You will analyze interprocedural data-flow paths to determine whether they can cause exceptions or bugs like null pointer dereferences or use-after-free.",
    "analysis_rules": [
      "Follow this systematic analysis approach:",
      "1. Path Reachability Analysis:",
      "   - Examine each sub-path within different functions",
      "   - For each sub-path, identify all branch conditions",
      "   - Track variable values and their impact on conditions",
      "   - Check for conflicting conditions across sub-paths",
      "   - If any condition conflicts exist, the path is unreachable (answer No)",
      "",
      "2. Variable Tracking Analysis:",
      "   - Follow the source value through the propagation path",
      "   - Check if the value is modified or null-checked before reaching the sink",
      "   - If the value is modified or safely checked, the bug cannot occur (answer No)",
      "",
      "3. Control Flow Analysis:",
      "   - Check if any function exits or returns before reaching critical points",
      "   - If early returns prevent the value from reaching the sink, the path is unreachable (answer No)",
      "",
      "4. Final Determination:",
      "   - If all sub-paths are reachable (no conflicting conditions)",
      "   - AND the source value reaches the sink without modification or checks",
      "   - AND no early returns prevent the propagation",
      "   - THEN the path can cause the specified bug (answer Yes)",
      "   - OTHERWISE the bug cannot occur (answer No)"
    ],
    "question_template": [
      "When these functions are executed, is it possible that the following propagation path can introduce a <BUG_TYPE> bug?", 
      "```",
      "<PATH>",
      "```",
      "Here are the detailed explanation of this propagation path:",
      "<EXPLANATION>",
      ""
    ],
    "analysis_examples": [
      "Here are several examples to guide your analysis:",
      "\n",
      "Example 1:",
      "User:",
      "Here is the program:",
      "```",
      "1. int* getArray(int length) {",
      "2.     int* array = NULL;",
      "3.     if (length > 0) {",
      "4.         array = (int*)malloc(length * sizeof(int));",
      "6.     }",
      "7.     return array;",
      "8. }",
      "",
      "1. int* getEvenArray(int length) {",
      "2.    if length <= 0 {",
      "3.        return NULL;",
      "4.    }",
      "5.    int* array = getArray(length);",
      "6.    for (int i = 0; i < length; i++) {",
      "7.        array[i] = 2*i;",
      "8.    }",
      "9.    return array;",
      "10. }",
      "```",
      "When these functions are executed, is it possible that the following propagation path can introduce a Null Pointer Deference bug?",
      "`array` at line 2 in the function `getArray` --> `int* array = getArray(length);` at line 5 in the function `getEvenArray`",
      "Here are the detailed explanation of this propagation path: ",
      "1. The null value at line 2 in function getArray is returned to caller at line 7.",
      "2. The null value at line 5 in function getEvenArray is dereferenceed at line 7, causing a Null Pointer Dereference bug.",
      "System:",
      "Explanation: This path consists of 2 sub-paths. The first sub-path in function `getArray` is reachable when condition `length <= 0`. The second sub-path in function `getEvenArray` is executed when condition `length > 0`. These conditions directly contradict each other. Since the same `length` parameter cannot simultaneously satisfy both conditions, the path is unreachable.",
      "Answer: No.",
      "",
      "Example 2:",
      "User:",
      "Here is the program:",
      "```",
      "1. int foo(int* ptr) {",
      "2.     if (access(ptr, R_OK) == -1) {",
      "3.       free(ptr);",
      "4.       return -1;",
      "5.     }",
      "6.     return 0;",
      "7. }",
      "",
      "1. int goo(int* ptr) {",
      "2.     if (foo(ptr) != -1){",
      "3.         return *ptr",
      "4.     }",
      "5.     return -1;",
      "6. }",
      "```",
      "When these functions are executed, is it possible that the following propagation path can introduce a Use After Free bug?",
      "`free(ptr);` at line 3 in the function `foo` --> `foo(ptr)` at line 2 in the function `goo`",
      "Here are the detailed explanation of this propagation path: ",
      "1. The freed pointer at line 3 in function `foo` can propagate to the caller function through pointer parameter `ptr`",
      "2. The freed pointer at line 2 in function `goo` is dereferenceed at line 3, causing a Use After Free bug.",
      "System:",
      "Explanation: This path consists of 2 sub-paths. The first sub-path in function `foo` executes when `access(ptr, R_OK) == -1` which causes the function to return -1 after freeing ptr. The second sub-path in function `goo` requires `foo(ptr) != -1` to execute line 3. These conditions directly conflictâ€”the first path returns -1, but the second requires a non-(-1) return value to proceed. Due to this logical contradiction, the path is unreachable.",
      "Answer: No.",
      "",
      "Example 3:",
      "User:",
      "Here is the program:",
      "```",
      "1. int* foo(int length) {",
      "2.     int *num1 = NULL;",
      "3.     if (length > 0) {",
      "4.         num1 = (int*)malloc(sizeof(int));",
      "5.     }",
      "6.     return num1;",
      "7. }",
      "",
      "1. int goo(int length) {",
      "2.     int* num1 = foo(length);",
      "3.     return *num1;",
      "4. }",
      "```",
      "When these functions are executed, is it possible that the following propagation path can introduce a Null Pointer Deference bug?",
      "`int *num1 = NULL;` at line 2 in the function `foo` --> `int* num1 = foo(length);` at line 2 in the function `goo`",
      "Here are the detailed explanation of this propagation path: ",
      "1. The null value at line 2 in function `foo` is returned to caller at line 6.",
      "2. The null value at line 2 in function `goo` is dereferenceed at line 3, causing a Null Pointer Dereference bug.",
      "System:",
      "Explanation: This path consists of 2 sub-paths. The first sub-path in function `foo` returns NULL when `length <= 0`. The second sub-path in function `goo` has no specific conditions and will dereference whatever `foo(length)` returns. If `length <= 0` is passed to both functions, `foo` will return NULL and `goo` will dereference it without checking. There are no conflicting conditions between the sub-paths, making this a reachable path that can cause a Null Pointer Dereference bug.",
      "Answer: Yes.",
      ""
    ],
    "line_analysis_guidance": [
      "For each line in the propagation path, analyze its reachability using this systematic approach:",
      "1. Identify if the line is within a conditional branch (if, else, switch, etc.)",
      "2. Determine the exact condition that makes this line execute",
      "3. Track variable values to determine if the condition can be satisfied",
      "4. State whether the line is reachable based on this analysis",
      "",
      "Example line analysis:",
      "- Line 45 is in the true branch of an if statement (condition: ptr != NULL)",
      "- Based on prior analysis, we know ptr was assigned NULL at line 23",
      "- Since NULL != NULL evaluates to false, the condition fails",
      "- Therefore, line 45 is unreachable in this execution path"
    ],
    "answer_format": [
      "Provide your analysis in this two-part format:",
      "",
      "Explanation: [Detailed step-by-step reasoning covering condition analysis, variable tracking, and final determination]",
      "Answer: [Yes or No]"
    ],
    "meta_prompts": [
       "Now I will give you the program as follows: \n```\n<PROGRAM>\n``` \n",
       "Please answer the following question:\n<QUESTION>\n",
       "Your answer should follow the specified format with a detailed explanation followed by a clear Yes/No answer.\n",
       "Important: Do not make assumptions about the behavior or return values of external functions that are not provided in the code. Focus only on analyzing the conditions and control flow within the given functions.\n"
    ]
}